diff --git a/hvpty/hvpty-backend.c b/hvpty/hvpty-backend.c
index 8201ff0..0dc8391 100644
--- a/hvpty/hvpty-backend.c
+++ b/hvpty/hvpty-backend.c
@@ -95,6 +95,7 @@ static void usage(const char *prog)
            "  -c, --cols N   set N columns for pty\n"
            "  -h, --help     show this usage information\n"
            "  -r, --rows N   set N rows for pty\n"
+	   "  -P, --path dir start in certain path\n"
            "  -p, --port N   set port N to initialize connections\n", prog);
     exit(0);
 }
@@ -115,15 +116,16 @@ int main(int argc, char *argv[])
     unsigned int initPort = 0, randomPort = 0;
     int c = 0;
 
-    const char shortopts[] = "+c:hr:p:";
+    const char shortopts[] = "+c:hr:P:p:";
     const struct option longopts[] = {
         { "cols",  required_argument, 0, 'c' },
         { "help",  no_argument,       0, 'h' },
         { "rows",  required_argument, 0, 'r' },
+	{ "path",  required_argument, 0, 'P' },
         { "port",  required_argument, 0, 'p' },
         { 0,       no_argument,       0,  0  },
     };
-
+    char *work_path = NULL;
     while ((c = getopt_long(argc, argv, shortopts, longopts, NULL)) != -1)
     {
         switch (c)
@@ -140,12 +142,18 @@ int main(int argc, char *argv[])
             case 'r':
                 winp.ws_row = atoi(optarg);
                 break;
-            default:
+            case 'P':
+                work_path = optarg;
+                break;
+	    default:
                 try_help(argv[0]);
                 break;
         }
     }
 
+    if (work_path) {
+        chdir(work_path);
+    }
     if (winp.ws_col == 0 || winp.ws_row == 0)
     {
         ret = ioctl(STDIN_FILENO, TIOCGWINSZ, &winp);
diff --git a/hvpty/hvpty.cpp b/hvpty/hvpty.cpp
index 61fb8b4..c7794c0 100644
--- a/hvpty/hvpty.cpp
+++ b/hvpty/hvpty.cpp
@@ -73,7 +73,7 @@ static SOCKET Initialize(std::wstring &command, GUID *VmId)
     ret = swprintf(buffer.data(), buffer.size(), L"%d", port);
     assert(ret > 0);
     command.replace(portpos, 5, buffer.data());
-
+    wprintf(L"%ls\n", &command[0]);
     ret = listen(sServer, -1);
     assert(ret == 0);
 
@@ -209,6 +209,8 @@ static void usage(const char *prog)
            "                Overrides the default path of wslbridge2-backend to BACKEND\n"
            "  -C, --directory WINDIR\n"
            "                Changes the working directory to WINDIR first\n"
+	   "  -D, --wsl-dir WSLDIR\n"
+           "                Changes the working directory to WSLDIR in WSL\n"
            "  -d, --distribution Distribution Name\n"
            "                Run the specified distribution\n"
            "  -h, --help    Show this usage information\n"
@@ -226,12 +228,13 @@ int main(int argc, char *argv[])
     ret = WSAStartup(MAKEWORD(2,2), &wdata);
     assert(ret == 0);
 
-    const char shortopts[] = "+b:C:d:hu:";
+    const char shortopts[] = "+b:C:D:d:hu:";
     const struct option longopts[] = {
         { "backend",       required_argument, 0, 'b' },
         { "directory",     required_argument, 0, 'C' },
         { "distribution",  required_argument, 0, 'd' },
         { "help",          no_argument,       0, 'h' },
+	{ "wsl-dir",       required_argument, 0, 'D' },
         { "user",          required_argument, 0, 'u' },
         { 0,               no_argument,       0,  0  },
     };
@@ -240,6 +243,8 @@ int main(int argc, char *argv[])
     std::string distroName;
     std::string customBackendPath;
     std::string userName;
+    bool has_wsldir = false;
+    std::string wsldir;
     int c = 0;
 
     while ((c = getopt_long(argc, argv, shortopts, longopts, nullptr)) != -1)
@@ -261,6 +266,12 @@ int main(int argc, char *argv[])
                 if (spawnCwd.empty())
                     fatal("error: the -C option requires a non-empty string argument\n");
                 break;
+            case 'D':
+                wsldir = optarg;
+		has_wsldir = true;
+                if (wsldir.empty())
+                    fatal("error: the -D option requires a non-empty string argument\n");
+                break;
 
             case 'd':
                 distroName = optarg;
@@ -271,7 +282,6 @@ int main(int argc, char *argv[])
             case 'h':
                 usage(argv[0]);
                 break;
-
             case 'u':
                 userName = optarg;
                 if (userName.empty())
@@ -302,9 +312,12 @@ int main(int argc, char *argv[])
                        L" --cols %d --rows %d --port $PORT",
                        initialSize.cols,
                        initialSize.rows);
-
         assert(ret > 0);
         wslCmdLine.append(buffer.data());
+	if (has_wsldir) {
+	  wslCmdLine.append(L" --path ");
+	  wslCmdLine.append(mbsToWcs(wsldir));
+	}
     }
 
     std::wstring cmdLine;
@@ -321,8 +334,8 @@ int main(int argc, char *argv[])
    /* Taken from HKCU\Directory\Background\shell\WSL\command */
     if (!spawnCwd.empty())
     {
-        cmdLine.append(L" --cd ");
-        cmdLine.append(mbsToWcs(spawnCwd));
+      cmdLine.append(L" --cd ");
+      cmdLine.append(mbsToWcs(spawnCwd));
     }
 
     if (!userName.empty())
diff --git a/wslbridge/wslbridge-backend.cpp b/wslbridge/wslbridge-backend.cpp
index 31c8ac2..e27e7c4 100644
--- a/wslbridge/wslbridge-backend.cpp
+++ b/wslbridge/wslbridge-backend.cpp
@@ -525,9 +525,9 @@ int main(int argc, char *argv[]) {
         { "debug-fork",     false, nullptr,     0 },
         { nullptr,          false, nullptr,     0 },
     };
-
+    //    char *work_dir = NULL;
     int ch = 0;
-    while ((ch = getopt_long(argc, argv, "+3:0:1:2:c:r:w:t:e:C:l", kOptionTable, nullptr)) != -1) {
+    while ((ch = getopt_long(argc, argv, "+3:0:1:2:c:r:w:t:e:C:lP:", kOptionTable, nullptr)) != -1) {
         switch (ch) {
             case 0:
                 // This is returned for the two long options.  getopt_long
@@ -543,12 +543,14 @@ int main(int argc, char *argv[]) {
             case 't': windowThreshold = atoi(optarg); break;
             case 'e': childParams.env.push_back(strdup(optarg)); break;
             case 'C': childParams.cwd = optarg; break;
+	      //case 'P': work_dir = optarg; break;
             case 'l': loginMode = true; break;
             default:
                 exit(1);
         }
     }
-
+    if (work_dir) {
+    }
     for (int i = optind; i < argc; ++i) {
         childParams.argv.push_back(argv[i]);
     }
diff --git a/wslbridge/wslbridge.cpp b/wslbridge/wslbridge.cpp
index 1565cad..3d114e6 100644
--- a/wslbridge/wslbridge.cpp
+++ b/wslbridge/wslbridge.cpp
@@ -211,6 +211,9 @@ static void usage(const char *prog) {
     printf("                Overrides the default path of wslbridge2-backend to BACKEND\n");
     printf("  -C, --directory WINDIR\n");
     printf("                Changes the working directory to WINDIR first\n");
+    printf("  -D, --wsl-dir WINDIR\n");
+    printf("                Changes the working directory to WSL-DIR in backend\n");
+
     printf("  -d, --distribution Distribution Name\n");
     printf("                Run the specified distribution.\n");
     printf("  -e VAR        Copies VAR into the WSL environment.\n");
@@ -482,6 +485,8 @@ int main(int argc, char *argv[])
     std::string spawnCwd;
     std::string distroName;
     std::string customBackendPath;
+    std::string wsl_dir;
+    bool has_wsldir = false;
     enum class TtyRequest { Auto, Yes, No, Force } ttyRequest = TtyRequest::Auto;
     enum class LoginMode { Auto, Yes, No } loginMode = LoginMode::Auto;
 
@@ -491,10 +496,11 @@ int main(int argc, char *argv[])
         loginMode = LoginMode::Yes;
     }
 
-    const char shortopts[] = "+b:C:d:e:hlLtT";
+    const char shortopts[] = "+b:C:D:d:e:hlLtT";
     const struct option longopts[] = {
         { "backend",        required_argument,  nullptr,     'b' },
         { "directory",      required_argument,  nullptr,     'C' },
+	{ "wsl-dir",        required_argument,  nullptr,     'D' },
         { "distribution",   required_argument,  nullptr,     'd' },
         { "help",           no_argument,        nullptr,     'h' },
         { "debug-fork",     no_argument,       &debugFork,    1  },
@@ -528,6 +534,13 @@ int main(int argc, char *argv[])
                     fatal("error: the -C option requires a non-empty string argument\n");
                 }
                 break;
+            case 'D':
+	        has_wsldir = true;
+		wsl_dir = optarg;
+		if (wsl_dir.empty()) {
+                    fatal("error: the -D option requires a non-empty string argument\n");
+                }
+	        break;
             case 'h':
                 usage(argv[0]);
                 break;
@@ -620,6 +633,10 @@ int main(int argc, char *argv[])
         appendWslArg(wslCmdLine, L"--debug-fork");
     }
 
+    if (has_wsldir) {
+        appendWslArg(wslCmdLine, L"-C");
+        appendWslArg(wslCmdLine, mbsToWcs(wsl_dir));
+    }
     std::array<wchar_t, 1024> buffer;
     int iRet = swprintf(buffer.data(), buffer.size(),
                         L" -3%d -0%d -1%d -w%d -t%d",
@@ -690,7 +707,7 @@ int main(int argc, char *argv[])
     sui.StartupInfo.dwFlags |= STARTF_USESTDHANDLES;
     sui.StartupInfo.hStdOutput = outputPipe.wh;
     sui.StartupInfo.hStdError = errorPipe.wh;
-
+    wprintf(L"%ls\n", &cmdLine[0]);
     PROCESS_INFORMATION pi = {};
     BOOL success = CreateProcessW(wslPath.c_str(), &cmdLine[0], nullptr, nullptr,
         true,
